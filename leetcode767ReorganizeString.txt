class Solution {
    
    public class Pair{
        char ch;
        int f;  
          Pair(char ch,int f){
            this.ch=ch;
            this.f=f;
        }
    }
    
    
    public String reorganizeString(String s) {
        int[] map=new int[26];
        
        for(int i=0;i<s.length();i++){
            char ch=s.charAt(i);
            map[ch-'a']++;
        }
        
        PriorityQueue<Pair> pq=new PriorityQueue<>((a,b)->(b.f-a.f));
        
        for(int i=0;i<26;i++){
            if(map[i]>0){
                char ch=(char)('a'+ i);
                Pair p=new Pair(ch,map[i]); 
                pq.add(p);
            }
        }
        
        StringBuilder sb=new StringBuilder();
        
        Pair block=pq.poll();
        sb.append(block.ch);
        block.f--;
        
        
        while(pq.size()>0){
              Pair temp=pq.poll();
              sb.append(temp.ch);
              temp.f--;
            
               if(block.f>0){
                        pq.add(block);
                    }
              block=temp;
        }
           if(block.f>0){
               return "";
           }
            return  sb.toString();
    }
    
}